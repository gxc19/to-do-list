{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","list","currentInput","componentDidMount","a","fetch","response","json","data","console","log","setState","addHandler","e","target","value","submit","storeInput","alert","push","task","method","headers","body","JSON","stringify","removeHandler","index","storeList","splice","enterHandler","event","key","className","onClick","this","type","placeholder","onChange","onKeyPress","map","savedInput","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0SAoFeA,G,iNAhFbC,MAAQ,CACNC,KAAM,GACNC,aAAc,I,EAGhBC,kB,sBAAoB,8BAAAC,EAAA,sEACKC,MAAM,8BADX,cACZC,EADY,gBAECA,EAASC,OAFV,OAEZC,EAFY,OAGlBC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CAACV,KAAMO,EAAKA,OAJR,2C,EAOpBI,WAAa,SAAAC,GACX,EAAKF,SAAS,CAAET,aAAcW,EAAEC,OAAOC,S,EAGzCC,OAAS,WACP,IAAIC,EAAa,EAAKjB,MAAMC,KAC5B,GAA+B,KAA5B,EAAKD,MAAME,aACZ,OAAOgB,MAAM,kCAEfD,EAAWE,KAAK,CAACC,KAAM,EAAKpB,MAAME,eAClC,EAAKS,SAAS,CAACV,KAAMgB,EAAYf,aAAc,KAC/CO,QAAQC,IAAI,SAEZL,MAAM,gCAAiC,CACrCgB,OAAQ,OACRC,QAAS,CAAC,eAAgB,oBAC1BC,KAAMC,KAAKC,UAAU,CACrBL,KAAM,EAAKpB,MAAME,kB,EAKrBwB,cAAgB,SAACC,EAAOP,GACtB,IAAIQ,EAAY,EAAK5B,MAAMC,KAC3B2B,EAAUC,OAAOF,EAAO,GACxB,EAAKhB,SAAS,CAAEV,KAAM2B,IAEtBvB,MAAM,+BAAgC,CACpCgB,OAAQ,OACRC,QAAS,CAAC,eAAgB,oBAC1BC,KAAMC,KAAKC,UAAU,CACrBL,KAAMA,O,EAKVU,aAAe,SAACC,GACI,UAAdA,EAAMC,KACR,EAAKhB,U,wEAIE,IAAD,OACR,OACE,yBAAKiB,UAAU,aACb,yBAAKA,UAAU,SACb,2CAEF,yBAAKA,UAAU,cACf,4BAAQA,UAAU,UAAUC,QAASC,KAAKnB,QAA1C,OACA,2BAAOiB,UAAU,OAAOG,KAAK,OAAQC,YAAY,YAAYtB,MAAOoB,KAAKnC,MAAME,aAAcoC,SAAUH,KAAKvB,WAAY2B,WAAYJ,KAAKL,eACzI,yBAAKG,UAAU,YACZE,KAAKnC,MAAMC,KAAKuC,KAAI,SAACC,EAAYd,GAClC,OACE,yBAAKM,UAAU,QACb,4BAAQA,UAAU,UAAUD,IAAKL,EAAOO,QAAS,kBAAM,EAAKR,cAAcC,EAAOc,EAAWrB,SAC5F,2BAAIqB,EAAWrB,iB,GArEXsB,cCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlD,QAAQkD,MAAMA,EAAMC,c","file":"static/js/main.8e033e9f.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    list: [],\n    currentInput: \"\",\n  }\n\n  componentDidMount = async () => {\n    const response = await fetch(\"http://localhost:3010/data\")\n    const data = await response.json()\n    console.log(data)\n    this.setState({list: data.data})\n  }\n\n  addHandler = e => {\n    this.setState({ currentInput: e.target.value })\n  }\n\n  submit = () => {\n    let storeInput = this.state.list\n    if(this.state.currentInput === \"\"){\n      return alert(\"Please Type In The Space Below\")\n    }\n    storeInput.push({task: this.state.currentInput})\n    this.setState({list: storeInput, currentInput: \"\"})\n    console.log(\"Hi o/\")\n\n    fetch(\"http://localhost:3010/taskAdd\", {\n      method: \"POST\",\n      headers: {\"content-type\": \"application/json\"},\n      body: JSON.stringify({\n      task: this.state.currentInput\n    })\n  })\n  }\n\n  removeHandler = (index, task) => {\n    let storeList = this.state.list\n    storeList.splice(index, 1)\n    this.setState({ list: storeList })\n\n    fetch(\"http://localhost:3010/delete\", {\n      method: \"POST\",\n      headers: {\"content-type\": \"application/json\"},\n      body: JSON.stringify({\n      task: task\n    })\n  })\n  }\n\n  enterHandler = (event) => {\n    if (event.key === 'Enter'){\n      this.submit()\n    }\n  }\n\n  render () {\n    return (\n      <div className=\"container\">\n        <div className=\"title\">\n          <h1>To-Do-List</h1>\n        </div>\n        <div className=\"to-do-list\">\n        <button className=\"button1\" onClick={this.submit}>Add</button>\n        <input className=\"text\" type=\"text\"  placeholder=\"Type Here\" value={this.state.currentInput} onChange={this.addHandler} onKeyPress={this.enterHandler}/>\n        <div className=\"list-box\">\n          {this.state.list.map((savedInput, index) => {\n          return (\n            <div className=\"list\">\n              <button className=\"button2\" key={index} onClick={() => this.removeHandler(index, savedInput.task)}/>\n              <p>{savedInput.task}</p>\n            </div>\n          )\n        })}\n        </div>\n        \n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}